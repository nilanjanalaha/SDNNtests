mlef2 <- logConDens(t2, smoothed=FALSE)
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
plot.fig.2(t1, t2)
d1=t1
d2=t2
x <- sort(d1); y <- sort(d2)
#pdf("Birges_est_test.pdf")
g <- array(0)
g2 <- g
s1 <- calc_mode(x,1/length(x))
s2 <- calc_mode(y,1/length(y))
x1<-s1$f.knots
x2<-s1$x.knots
x3<-s1$F.knots
y1<-s2$f.knots
y2<-s2$x.knots
y3<-s2$F.knots
d<-length(x1)
g[1:d]<-x1
g[d+1]<-g[d]
d2<-length(y1)
g2[1:d2]<-y1
g2[d2+1]<-g2[d2]
lim.vec <- range(c(g2,g))
plot(y2,g2, type="s",  ylab=" ", col='blue',  xlab=" log(net MFI)",ylim=lim.vec, cex.lab=2, lwd=2,cex.axis=1.5, cex.main=1.5, cex.sub=2)
lines(x2,g,type="s",col='red', lwd=2)
legend("topleft",c("HVTN 097","HVTN 100"),lwd = rep(2,2),lty=rep(1,2),
col=c('red','blue'),pt.cex=1.4, cex=1.4, bty='n')
grid(lty=1)
plot(x2,x3, type='l', col='red', lwd=2, ylab=" ")
lines(y2,y3, col='blue')
#dev.off()
legend("topright",c("HVTN 097","HVTN 100"),lwd = rep(2,2),lty=rep(1,2),
col=c('red','blue'),pt.cex=1.4, cex=1.4, bty='n')
title(main="Birge's estimators")
grid()
mlef1 <- logConDens(d1, smoothed = FALSE)
x1 <- mlef1$knots
mlef2 <- logConDens(d2, smoothed=FALSE)
x2 <- mlef2$knots
ran1 <-range(x1)
sup1 <- seq(ran1[1],ran1[2],by=0.001)
sup1 <- c(sup1,x1)
lc_d1 <- evaluateLogConDens(sup1,mlef1,which=2)[,3]
d2
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
plot.fig.2(t1, t2)
library(SDNNtests)
plot.fig.2
?plot.fig.2
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
library(SDNNtests)
?do_descccription
?do_description
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
source('~/Dropbox/Vaccine_trial/SDNNtests/R/descrip.R')
source('~/Dropbox/Vaccine_trial/SDNNtests/R/descrip.R')
library(SDNNtests)
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
library(SDNNtests)
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Bernstein.R')
library(SDNNtests)
plot_fig_2(t1, t2)
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
plot_fig_2(t1, t2)
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
plot_fig_2(t1, t2)
par(mfrow=c(1,1))
source('~/Dropbox/Vaccine_trial/SDNNtests/R/umd.R')
library(SDNNtests)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
library(SDNNtests)
par(mfrow=c(1,1))
SDNNtests::plot_fig_2(t1, t2)
source('~/Dropbox/Vaccine_trial/SDNNtests/R/Fig2.R')
library(SDNNtests)
do_description
source('~/Dropbox/Vaccine_trial/SDNNtests/R/descrip.R')
t1
t2
do_description(t1, t2)
source('~/Dropbox/Vaccine_trial/SDNNtests/R/descrip.R')
library(SDNNtests)
?do_description
do_description(t1, t2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
library(SDNNtests)
do_description(t1, t2)
library(SDNNtests)
par(mfrow=c(1,1))
SDNNtests::plot_fig_2(t1, t2)
SDNNtests::plot_b(t1, t2)
do_description(t1, t2)
library(devtools)
library(SDNNtests)
getwd()
document()
check()
?SDNN
SDNN(d1, d2)
SDNN(t1, t2)
SDNN(t1, t2, Method="UM")
library(SDNNtests)
check()
library(roxygen2)
library(SDNNtests)
check()
document()
check()
library(SDNNtests)
document()
document()
library(SDNNtests)
do_description(t1, t2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
do_description(t1, t2)
library(SDNNtests)
par(mfrow=c(1,1))
SDNNtests::plot_fig_2(t1, t2)
SDNNtests::plot_b(t1, t2)
do_description(t1, t2)
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Fig2.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Fig2.R')
plot_fig_4(t1, t2)
plot_fig_3(t1, t2)
plot_fig_2(t1, t2)
setwd("~/Dropbox/Vaccine_trial/SDNNtests")
library(devtools)
document()
library(SDNNtests)
setwd("~/Dropbox/Vaccine_trial/Code_for_JASA")
source('fig2.R')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
plot_fig_2(t1, t2)
plot_fig_2(t1, t2)
plot_fig_2(t1, t2)
plot_fig_2(t1, t2)
plot_fig_3(t1, t2)
plot_fig_4(t1, t2)
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
ct_cv(t1)
ct_cv(sort(t1))
?scdensity
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
ct_cv(t2)
getwd()
source.all( path , grepstring="\\.R",  print.source=TRUE )
install.packages(RUtilities)
install.packages("RUtilities")
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
ct_cv(d2)
ct_cv(t2)
t2 =sort(t2)
t1=sort(t1)
ct_cv(t2)
testdata=t1[1:20]
traindata=t1[-1:20]
traindata=t1[-c(1:20)]
testdata=sort(testdata)
traindata=sort(traindata)
mlef1 <-  scdensity(traindata,constraint =c("unimodal","boundedLeft"),opts=list(lowerBound=0),method="greedySharpenedKDE")
testdata
traindata
testdata=sort(testdata)
traindata=sort(traindata)
mlef1 <-  scdensity(traindata,constraint =c("unimodal","boundedLeft"),method="greedySharpenedKDE")
ft1 <- function(x) mlef1$fhat(x)^2
calcgreedy <- function(testdata, traindata)
{
testdata=sort(testdata)
traindata=sort(traindata)
mlef1 <-  scdensity(traindata,constraint =c("unimodal"),method="greedySharpenedKDE")
ft1 <- function(x) mlef1$fhat(x)^2
integrate(ft1, 0,Inf)$value-2*mean(sqrt(ft1(testdata)))
}
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
ct_cv(t1)
ct_cv(sort(t2))
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
lk(sort(t1))
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
lk(sort(t1))
lk(sort(t2))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog", "scdensity" )
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
source('Grenander_function.R')
source('Table1_code.R')
t1 <- sort(t1); t2 <- sort(t2)
cv.t1 <- ct_cv(t1); cv.t2 <- ct_cv(t2)
lc.t1 <- lk(t1); lc.t2 <- lk(t2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog", "scdensity", "kableExtra" )
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
?kbl
dt
?scdensity
?kde
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
rowname
rowname <- c("UM (Birge)", "UM (Bernstein)", "UM (Wolters, 2012)",
"UM (Wolters and braun, 2010)", "UM (Hall and Huang, 2002)",
"Smoothed LC MLE", "LC MLE", "KDE (plug-in bandwidth)", "KDE(LSCV bandwidth)")
dt.1 <- data.frame(Method=rowname, MISE =ct_cv(t1), negative_loglik=lk(t1))
dt.2 <- data.frame(MISE=ct_cv(t2), negative_loglik=lk(t2))
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
traceback()
t1=sort(t1)
t2=sort(t2)
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
traceback()
MISE =ct_cv(t1)
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
warnings()
kbl(rbind(dt.1, dt.2), longtable = T, booktabs = T, caption = "Longtable") %>%
add_header_above(c(" ", "HVTN 097" = 2, "HVTN 097" = 2)) %>%
kable_styling(latex_options = c("repeat_header"))
kbl(cbind(dt.1, dt.2), longtable = T, booktabs = T, caption = "Longtable") %>%
add_header_above(c(" ", "HVTN 097" = 2, "HVTN 097" = 2)) %>%
kable_styling(latex_options = c("repeat_header"))
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
kbl(cbind(dt.1, dt.2), longtable = T, booktabs = T, caption = "Longtable") %>%
add_header_above(c(" ", "HVTN 097" = 2, "HVTN 097" = 2)) %>%
kable_styling(latex_options = c("repeat_header"))
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
kbl(cbind(dt.1, dt.2), longtable = T, booktabs = T, caption = "Longtable") %>%
add_header_above(c(" ", "HVTN 097" = 2, "HVTN 097" = 2)) %>%
kable_styling(latex_options = c("repeat_header"))
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
kbl(cbind(dt.1, dt.2), longtable = T, booktabs = T, caption = "Longtable") %>%
add_header_above(c(" ", "HVTN 097" = 2, "HVTN 097" = 2)) %>%
kable_styling(latex_options = c("repeat_header"))
source('Grenander_function.R')
t1 <- sort(t1); t2 <- sort(t2)
source('Table1_code.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
tb
source('Grenander_function.R')
t1 <- sort(t1); t2 <- sort(t2)
source('Table1_code.R')
tb
SDNN(t1, t2, p=0.075)
#Nonparametric tests
SDNN(t1, t2, p=0.075, Method="NP")
#Unimodal tests
SDNN(t1, t2, p=0.075, Method="UM")
#Log-concave tests
SDNN(t1, t2, p=0.075, Method="LC")
p=0.05
#Nonparametric tests
SDNN(t1, t2, p=p, Method="NP")
#Unimodal tests
SDNN(t1, t2, p=p, Method="UM")
#Log-concave tests
SDNN(t1, t2, p=p, Method="LC")
p=0.1
#Nonparametric tests
SDNN(t1, t2, p=p, Method="NP")
#Unimodal tests
SDNN(t1, t2, p=p, Method="UM")
#Log-concave tests
SDNN(t1, t2, p=p, Method="LC")
p=0.15
#Nonparametric tests
SDNN(t1, t2, p=p, Method="NP")
#Unimodal tests
SDNN(t1, t2, p=p, Method="UM")
#Log-concave tests
SDNN(t1, t2, p=p, Method="LC")
library(SDNNtests)
do_description(t1, t2)
library(SDNNtests)
SDNN(t1, t2, "NP", p1=0.05, p2=0.10)
SDNN(t1, t2, "NP", p1=0.05, p2=0.05)
SDNN(t1, t2, "NP", p1=0.05, p2=0.15)
min(t1)
t2
jt <- sort(c(t1, t2))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog", "scdensity", "kableExtra" )
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
jt <- sort(c(t1, t2))
which(jt==c(min(t1), min(t2), max(t1), max(t2)))
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 47/(180+68)
p2 <- 239/(180+68)
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
p1
p2
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 47/(180+68)
p2 <- 1-239/(180+68)
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 47/(180+68)
p2 <- 1-239/(180+68)
which(ecdf(t1)(jt)-ecdf(t2)(jt)>=0)
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 47/(180+68)
p2 <- 1-231/(180+68)
which(ecdf(t1)(jt)-ecdf(t2)(jt)>=0)
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 46/(180+68)
p2 <- 1-231/(180+68)
which(ecdf(t1)(jt)-ecdf(t2)(jt)>=0)
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
p1
p2
which(jt==10)
which(jt>=10)
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 46/(180+68)
p2 <- 1-220/(180+68)
which(ecdf(t1)(jt)-ecdf(t2)(jt)>=0)
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 46/(180+68)
p2 <- 1-225/(180+68)
which(ecdf(t1)(jt)-ecdf(t2)(jt)>=0)
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
p1 <- 46/(180+68)
p2 <- 1-220/(180+68)
which(ecdf(t1)(jt)-ecdf(t2)(jt)>=0)
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
p1
p2
#Nonparametric tests
p2=0.10
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
indicated in Laha et al. (2020), our tests require $D$ to be subset of the individual supports as well. Further, the empirical distribution function of t1  should have  a strict dominance over that of t2 on $D$. Otherwise, there is no hope for rejecting of the test of no-dominance  against the restricted (to $D$) stochastic dominance of t1 over t2.
```{r Finding out truncation}
jt <- sort(c(t1, t2))
which(jt%in%c(min(t1), min(t2), max(t1), max(t2)))
which(ecdf(t1)(jt)-ecdf(t2)(jt)>=0)
N=180+68
p1 <- 46/N
p2 <- 1-231/N
```
Consider the truncation levels p1= `p1` and p2=`p2`. The following code shows that for $D=[jt[N*p1],jt[N*p2]]$=[`jt[N*p1]`,`jt[N*p2]`], our tests fail to reject the null of non-dominance. To this end, we use the R function SDNN from package SDNNtests, which give the p-values of the nonparametric, unimodal, and the log-concave tests.
```{r SDNN}
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
```
However, for  truncation levels p1= `p1` and p2=`1-220/(180+68)`  our tests reject the null of non-dominance on D=[`jt[N*p1]`,`jt[N*p2]`].
```{r SDNN 2}
p2 <- 1-220/(180+68)
#Nonparametric tests
SDNN(t1, t2, p1=p1, p2=p2, Method="NP")
#Unimodal tests
SDNN(t1, t2, p1=p1, p2=p2, Method="UM")
#Log-concave tests
SDNN(t1, t2, p1=p1, p2=p2, Method="LC")
```
jt[N*p1]
SDNNtests
?hd.lc
?hd.lc.sm
?hd.uni
#log-concave estimate
hd.lc(t1, t2)
#smoothed log-concave estimate
hd.lc.sm(t1, t2)
#unimodal estimate and the confidence interval
hd.uni(t1, t2, alpha=0.05)
#log-concave estimate
hd.lc(t1, t2)
#smoothed log-concave estimate
hd.lc.sm(t1, t2)
#unimodal estimate and the confidence interval
hd.uni(t1, t2, alpha=0.05)
source('~/Google Drive/UW_cluster_files_etc/Alex/hellinger/hellinger.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/hellinger_NP.R')
source('~/Dropbox/Vaccine_trial/Code_for_JASA/hellinger_NP.R')
hd.cv(t1, t2)
source('~/Dropbox/Vaccine_trial/Code_for_JASA/hellinger_NP.R')
hd.cv(t1, t2)
source('~/Dropbox/Vaccine_trial/Code_for_JASA/hellinger_NP.R')
source('hellinger_NP.R')
temp <- hd.cv(t1, t2)
# The KDE based estimator
temp[1]
#The bias-corrected KDE based estimator
temp[2]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
packages = c("devtools", "ggplot2", "ks", "logcondens", "quadprog", "scdensity", "kableExtra" )
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
source('~/Dropbox/Vaccine_trial/Code_for_JASA/Table1_code.R')
tb
SDNNtests::plot_b(t1, t2)
library(SDNNtests)
do_description(t1, t2)
